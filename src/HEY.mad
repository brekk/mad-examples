import type { Maybe } from "Maybe"

import Fn from "Function"
import IO from "IO"
import List from "List"
import Math from "Math"
import { Just, Nothing } from "Maybe"
import Number from "Number"



sliceAround :: Integer -> List a -> List a
sliceAround = (i, list) => [
  ...(i != 0 ? List.slice(0, i, list) : []),
  ...List.slice(i + 1, List.length(list), list),
]


// combine :: Maybe a -> List a -> List (List a)
// combine = (nthIndex, list) => pipe(
//   List.length,
//   List.range(0),
//   map(
//     pipe(
//       List.nth($, list),
//       (j) => [nthIndex, j],
//       where {
//         [Just(x), Just(y)] =>
//           [x, y]

//         [Just(x), Nothing] =>
//           [x]

//         [Nothing, Just(x)] =>
//           [x]

//         _ =>
//           []
//       },
//     ),
//   ),
// )(list)


filterWithIndex :: (a -> Integer -> Boolean) -> List a -> List a
export filterWithIndex = (f, list) => {
  helper = (list_, index) => where(list_) {
    [] =>
      []

    [a, ...xs] =>
      (f(a, index) ? [a, ...helper(xs, index + 1)] : helper(xs, index + 1))
  }

  return helper(list, 0)
}


dropMany :: List Integer -> List a -> List a
dropMany = (whichIndices, list) => filterWithIndex(
  (_, idx) => !List.includes(idx, whichIndices),
  list,
)

alternate :: Integer -> Integer -> List a -> List a
alternate = (i, j, arr) => pipe(
  map(List.nth($, arr)),
  where {
    [Just(a), Just(b)] =>
      [a, b]

    [Just(a), Nothing] =>
      [a]

    [Nothing, Just(a)] =>
      [a]

    _ =>
      []
  },
  where {
    [ii, jj] =>
      List.mapWithIndex((x, idx) => (idx == i ? jj : idx == j ? ii : x), arr)

    _ =>
      []
  },
)([i, j])

permute = (list) => {
  // go :: OneListToMany a
  go = (inner) => pipe(
    List.length,
    // Fn.ifElse(
    // Fn.either(Fn.equals(1), Fn.equals(0)),
    // Fn.always([inner]),
    pipe(
      List.range(0),
      map(
        (i) => pipe(
          List.length,
          List.range(0),
          (j) => alternate(i, j, inner),
        )(arr),
      ),
    ),
  )(inner)
  return go(list)
}

main = () => {
  IO.trace("jump", sliceAround(2, ['h', 'o', 'o', 'r', 'a', 'y']))
  input = [0, 1, 2]
  sliced = [1, 2]
  // IO.trace("combine", combine(List.nth(0, input), sliced))
  // IO.trace("mute", permute(input))
  // ['s', 'h', 'i', 't', 'f', 'a', 'c', 'e']))
  IO.trace("ugh", alternate(0, 3, ['s', 'h', 'i', 't', 'f', 'a', 'c', 'e']))
  // IO.trace("NO", dropMany([0, 3], ["s", "h", "i", "t", "f", "a", "c", "e"]))
  // permute(['h','o','o','r','a','y'])
}
