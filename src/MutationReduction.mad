import { identity } from "Function"
import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"



numberRun = List.reduce(
  (agg, _) => pipe(
    List.last,
    where {
      Just(x) =>
        List.concat(agg, [x])

      Nothing =>
        agg
    },
  )(agg),
  [1],
)

main = () => {
  x = List.range(0, 5)
  a = numberRun(x)
  IO.trace("A.length", List.length(a))
  b = numberRun(x)
  IO.trace("B.length", List.length(b))
  c = numberRun(x)
  IO.trace("C.length", List.length(c))
  IO.trace("SAME?", { a, b, c })
  numberRun(x) |> IO.trace("A")
  numberRun(x) |> IO.trace("B")
  numberRun(x) |> IO.trace("C")
  IO.trace("LIST>RANGE>RAGE", List.range(0, 5))
  IO.trace("X", x)
  IO.trace("A / B / C", [a, b, c])
  IO.trace("LENGTHS", map(List.length)([a, b, c]))
}
